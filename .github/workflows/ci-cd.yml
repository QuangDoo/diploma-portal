name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to Staging
        run: |
          echo "Deploying the Docker image to staging server"
          sshpass -p ${{ secrets.VULTR_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ secrets.VULTR_SERVER_IP }} << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
            docker stop my-app-staging || true
            docker rm my-app-staging || true
            docker run -d --name my-app-staging -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
          EOF

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    steps:
      - name: Deploy to Production
        run: |
          echo "Deploying the Docker image to production server"
          ssh user@production-server.com << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
            docker stop my-app || true
            docker rm my-app || true
            docker run -d --name my-app -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
          EOF
